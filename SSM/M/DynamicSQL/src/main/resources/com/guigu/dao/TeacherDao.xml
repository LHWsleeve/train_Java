<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3. 0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guigu.dao.TeacherDao">
<!--        public Teacher getTeacherById();-->
    <select id="getTeacherById" resultMap="map" >
        select * from teacher where id=#{id}
    </select>
    <resultMap id="map" type="com.guigu.bean.Teacher">
        <id property="id" column="id"/>
        <result property="teacherName" column="teacherName"/>
        <result property="className" column="class_name"/>
        <result property="address" column="address"/>
        <result property="birthDate" column="birth_Date"/>
    </resultMap>
    
<!--        List<Teacher> getTeacherByCondition(Teacher teacher);-->
<!--test="id!=null"编写判断条件：去除传入的javaBean属性中的id值，判断其是否为空
            空串:""
            and：&&
            or :||
            if（）：传入非常强大的判断条件；OGNL表达式；
         <trim:
            prefix="":前缀；为我们下面的所有sql整体添加一个前缀
            prefixOverrides="":去除整体字符串，前面多余的字符
            suffix=""：后缀
            suffixOverrides=""：去除后缀
            -->
    <select id="getTeacherByCondition" resultMap="map">
        select * from teacher
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id>#{id} and
            </if>
            <if test="teacherName!=null &amp;&amp; !teacherName.equals(&quot;&quot;)">
                teacherName like #{teacherName} and
            </if>
            <if test="birthDate!=null">
                birth_date &lt; #{birthDate} and
            </if>
        </trim>
    </select>

<!--    for each:帮我们遍历集合；collection:指定要遍历的集合的key
            List<Teacher> getTeacherByIdIn(List<Integer> ids);
            separator=""：每次遍历的元素的分隔符===》 #{id_item}， #{id_item}， #{id_item}
            open=""：以什么开始
            close="":以什么结束
            index="" :索引。如果遍历一个List；index是保存当前list索引
                            如果便利的一个map，iundex保存当前遍历元素的key
                            item：都是保存当前元素的值
            item="变量名":和普通的foreach一样，从集合中取出的每一个元素别名


        -->
<select id="getTeacherByIdIn" resultMap="map">
    select * from teacher where id IN
    <foreach collection="ids" item="id_item" separator="," open="(" close=")">
    #{id_item}
    </foreach>
</select>

<!--    List<Teacher> getTeacherByConditionChoose(Teacher teacher);-->
    <select id="getTeacherByConditionChoose" resultMap="map">
        select * from teacher
        <trim prefix="where" suffixOverrides="and">
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="teacherName!=null and !teacherName.equals(&quot;&quot;)">
                    teacherName=#{teacherName}
                </when>
                <when test="birthDate!=null">
                    birth_Date=#{birthDate}
                </when>
                <otherwise>
                1=1
                </otherwise>
            </choose>
        </trim>
    </select>
<!--        int updateTeacher(Teacher teacher); 动态update-->
<update id="updateTeacher">
    update teacher
    <set>
        <if test="teacherName!=null and !teacherName.equals(&quot;&quot;)">
            teacherName=#{teacherName},
        </if>
        <if test="className!=null and !className.equals(&quot;&quot;)">
            class_name=#{className},
        </if>
        <if test="birthDate!=null and !birthDate.equals(&quot;&quot;)">
            birth_date=#{birthDate},
        </if>
    </set>
    <where>
        id=#{id}
    </where>
</update>
</mapper>