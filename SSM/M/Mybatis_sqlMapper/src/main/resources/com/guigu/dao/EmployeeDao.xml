<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3. 0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace:接口的!!!!，告诉Mybatis这个配置文件是实现哪个接口的
    这个文件中能写的所有标签：
    chace:缓存有关
    cache-ref:同上
    delete\uodata\insert\select:增删改查
    parameterMap:参数map，废弃。
    resultMap：结果集映射：自定义结果集的封装规则
    sql：抽取可重用的sql
                -->
<mapper namespace="com.guigu.dao.EmployeeDao">

    <select id="getEmployeeByid" resultType="com.guigu.bean.Employee"  >
        select * from employee where id=#{id}
    </select>

<!--    现象：
            1.单个参数：基本类型：取值，#{随便写}
                        或者传入pojo：
            2.多个参数：#{参数名}无效。
                        可用方式：使用参数索引或者param0....5
                        只要传入多个参数，mybatis会自动将左右参数封装在map中，封装时是使用的key就是索引或者标识
                       命名参数：可以指定mybatis封装map的时候使用我们指定的key(定义接口时，对参数使用Param()注解)

            3.POJO：取值：#{POJO属性名}
            4.传入map：将多个要使用的参数封装起来。传入一个map，传入前封装该map
                取值：#{key}

      实际上Mybatis中有两种取值方式：1.${属性名}：这种不是参数预编译，而是直接和sql语句拼串
                                   2.#{属性名}：参数预编译，参数位置用?替代，参数时后来预编译设置。安全，不会有sql注入问题
                                   sql语句只有参数位置是支持预编译的。所以我们使用${}来支持不预编译的位置，进行取值。

-->

<!--      Parameter 'id' not found. Available parameters are [arg1, arg0, param1, param2]。
            多参数限定时，不能直接写参数名，需要用agr0，agr1代替-->
<!--             select * from employee where id=#{id} and empname=#{empname}-->
    <select id="getEmployeeByidAndEmp" resultType="com.guigu.bean.Employee"  >

            select * from employee where id=#{id} and empname=#{empname}
    </select>


    <update id="updateEmp">
        update employee set empname=#{empname}, gender=#{gender}, email=#{email} where id=#{id}
    </update>

    <delete id="deleteEmp">
        delete from employee where #{id}
    </delete>

    <!--    让 My Batis自动的将自增id赋值给传入的emp1oyee对象的id属性
            useGeneratedKeys="true"原生Jdbc获取自增主键的方法；
            keyProperty=""：将刚才自增的id封装给哪个属性
            -->
    <insert id="insertEmp" useGeneratedKeys="true" keyProperty="id">
        insert into employee(empname,gender,email) values(#{empname},#{gender},#{email})
    </insert>
</mapper>